;---------------------------------------;;   MAP METHOD: CHAR;   COLOUR METHOD: PER CHAR;;---------------------------------------    *=$0801.byte $0c, $08, $0a, $00, $9e, $20.byte $34, $30, $39, $36, $00, $00.byte $00    *=$1000;---------------------------------------screenaddr = $0400coloraddr = $d800    ;---------------------------------------charaddr = $2000attribsaddr = $2800mapaddr = $4000;---------------------------------------mapwidth = 92 ; 16 bit supportedvisiblecharsy = 25color_transparent = $01color_bg1 = $0ecolor_bg2 = $06;---------------------------------------mapdata   = $02colourmem = $26mappointer = $32sourcescreen = $34destscreen = $36;---------------------------------------;;   BEHAVIOUR;;---------------------------------------;0 = KEY DOWN;1 = KEY PRESSkeymode = 0	;---------------------------------------;;   CODE;;---------------------------------------	           jsr $e544        sei			;turn off int	    lda #$7f    ldx #$01    sta $dc0d	;turn off cia1 int    sta $dd0d   ;turn off cia2 int    stx $d01a   ;turn on raster int        lda #$1b    ldx #$d8    ldy #$18    sta $d011    stx $d016    sty $d018        lda #<irq	;low part of addr int    ldx #>irq   ;hi  part of addr int    ldy #$ff    ;line to trigger    sta $0314   ;store to int vector    stx $0315    sty $d012        lda $dc0d	;ack cia 1 int    lda $dd0d   ;ack cia 2 int    asl $d019   ;ack vic int        ; code    lda #<mapaddr    sta mappointer	lda #>mapaddr    sta mappointer+1	lda #$00	sta sourcescreen	lda #$04	sta sourcescreen+1	lda #color_transparent	sta $d021	lda #$00	sta $d020	lda #color_bg1	sta $d022	lda #color_bg2	sta $d023		jsr decoderscreen    jsr decodercolour    ; end code        cli        jmp *        irq            jsr mainloop	        asl $d019    jmp $ea81	mainloopdjrr         lda $dc00djrrb        ldy #0	ldx #0	lsr a	bcs djr0	deydjr0         lsr a	bcs djr1	inydjr1         lsr a	bcs djr2	dexdjr2         lsr a	bcs djr3	inxdjr3         lsr a	stx dx	sty dy	lda dx	bne movex	lda dy	beq nomove	jmp moveynomove	lda #$00	sta stop	rtsmovex	lda stop	beq shiftcol    rts    shiftcol    	lda #keymode	sta stop    	lda dx	cmp #$01	beq rightleft	lda #$00	sta sourcescreen	lda #$04	sta sourcescreen+1	lda #$01	sta destscreen	lda #$04	sta destscreen+1	jsr lcopyscreenram    lda #$00	sta sourcescreen		lda #$01	sta destscreen	    lda #>coloraddr	sta sourcescreen+1    sta destscreen+1    	jsr lcopyscreenram	lda mappointer	sec	sbc #$01	sta mappointer	lda mappointer+1	sbc #$00	sta mappointer+1			lda mappointer	sta mapdata	lda mappointer+1	sta mapdata+1    ldx #>coloraddr    stx colourmem+1    	ldy #$00	sty sourcescreen    sty colourmem	ldx #$04	stx sourcescreen+1		jsr extractcolumn    	rtsright	lda #$01	sta sourcescreen	lda #$04	sta sourcescreen+1	lda #$00	sta destscreen	lda #$04	sta destscreen+1	jsr rcopyscreenram    lda #$01    sta sourcescreen        lda #$00	sta destscreen        lda #>coloraddr    sta sourcescreen+1    sta destscreen+1    jsr rcopyscreenram	lda mappointer	clc	adc #$28	sta mapdata	lda mappointer+1	adc #$00	sta mapdata+1        ldx #>coloraddr    stx colourmem+1        ldy #39	sty sourcescreen    sty colourmem        ldx #$04    stx sourcescreen+1	jsr extractcolumn    	inc mappointer	bne *+4	inc mappointer+1	rts            movey	lda stop	beq shiftrow	rts    shiftrow	lda #keymode	sta stop	lda dy	cmp #$01	beq downup    lda #$98    sta sourcescreen        lda #$c0    sta destscreen        lda #$07    sta sourcescreen+1    sta destscreen+1    jsr ucopyscreenram    lda #$98    sta sourcescreen        lda #$c0    sta destscreen        lda #$db    sta sourcescreen+1    sta destscreen+1    jsr ucopyscreenram	lda mappointer	sec	sbc #<mapwidth	sta mappointer	lda mappointer+1	sbc #>mapwidth	sta mappointer+1		lda mappointer	sta mapdata	lda mappointer+1	sta mapdata+1		;	dex;	bne u1		lda #<screenaddr    sta sourcescreen	ldx #>screenaddr+1    stx sourcescreen+1        lda #<coloraddr    sta colourmem    lda #>coloraddr    sta colourmem+1    	jsr extractrow    	rtsdown	lda #$28	sta sourcescreen	lda #$04	sta sourcescreen+1	lda #$00	sta destscreen	lda #$04	sta destscreen+1	jsr dcopyscreenram    lda #$28	sta sourcescreen		lda #$00	sta destscreen    	lda #>coloraddr    sta sourcescreen+1	sta destscreen+1	jsr dcopyscreenram    	lda mappointer	sta mapdata	lda mappointer+1	sta mapdata+1	ldx #visiblecharsy	dexdw2	lda mapdata	clc	adc #<mapwidth	sta mapdata	lda mapdata+1	adc #>mapwidth	sta mapdata+1	dex	bpl dw2		lda #$c0    sta colourmem    lda #$db    sta colourmem+1        lda #$c0    sta sourcescreen    lda #$07    sta sourcescreen+1		jsr extractrow        lda mappointer	clc	adc #<mapwidth	sta mappointer	lda mappointer+1	adc #>mapwidth	sta mappointer+1		rts        extractcolumn			lda #visiblecharsy	sta currentchary			ldy #$00ec1		lda (mapdata),y	sta (sourcescreen),y		tax    lda attribsaddr,x    sta (colourmem),y		; update colour memory position	lda mapdata    clc	    adc #<mapwidth    sta mapdata	lda mapdata+1	adc #>mapwidth	sta mapdata+1		; update colour memory position    lda colourmem    clc    adc #$28    sta colourmem    bcc *+4    inc colourmem+1		; update char memory position	lda sourcescreen    clc    adc #$28            sta sourcescreen    bcc *+4    inc sourcescreen+1		dec currentchary	bne ec1	    rts	           decoderscreen	lda mappointer	sta mapdata	lda mappointer+1    sta mapdata+1		lda sourcescreen	sta printchar+1	lda sourcescreen+1	sta printchar+2		lda #visiblecharsy		sta currentcharyreadmap	ldy #$28	ldx #$28readchar				dey	lda (mapdata),y	dexprintchar			sta $ffff,x		bne readchar		dec currentchary	beq ds1		lda printchar+1	clc	adc #$28	sta printchar+1	bcc *+5	inc printchar+2		clc	lda mapdata	adc #<mapwidth	sta mapdata	lda mapdata+1	adc #>mapwidth	sta mapdata+1		bcc readmap ; branch always	ds1	rts            decodercolour    ldx #$00loop	ldy screenaddr,x	lda attribsaddr,y	sta coloraddr,x        ldy screenaddr+$100,x    lda attribsaddr,y	sta coloraddr+$100,x	    ldy screenaddr+$200,x    lda attribsaddr,y	sta coloraddr+$200,x	    ldy screenaddr+$2e8,x    lda attribsaddr,y	sta coloraddr+$2e8,x        inx	bne loop        rts          extractrow	ldy #$28	er1			dey	lda (mapdata),y	sta (sourcescreen),y		tax		lda attribsaddr,x	sta (colourmem),y			tya	bne er1	rts    ; shift screen leftrcopyscreenram	ldx #24	ldy #$00	lda (sourcescreen),y	sta (destscreen),y	iny	lda (sourcescreen),y	sta (destscreen),y	iny	lda (sourcescreen),y	sta (destscreen),y	iny	lda (sourcescreen),y	sta (destscreen),y	iny	lda (sourcescreen),y	sta (destscreen),y	iny	lda (sourcescreen),y	sta (destscreen),y	iny	cpy #36	bne rcopyscreenram+4	lda (sourcescreen),y	sta (destscreen),y	iny	lda (sourcescreen),y	sta (destscreen),y	iny	lda (sourcescreen),y	sta (destscreen),y	iny	lda sourcescreen	clc	adc #$28	sta sourcescreen	bcc *+4	inc sourcescreen+1	lda destscreen	clc	adc #$28	sta destscreen	bcc *+4	inc destscreen+1	dex	bpl rcopyscreenram+2	rts; shift screen rightlcopyscreenram	ldx #24	ldy #38	lda (sourcescreen),y	sta (destscreen),y	dey	lda (sourcescreen),y	sta (destscreen),y	dey	lda (sourcescreen),y	sta (destscreen),y	dey	lda (sourcescreen),y	sta (destscreen),y	dey	lda (sourcescreen),y	sta (destscreen),y	dey	lda (sourcescreen),y	sta (destscreen),y	dey	cpy #2	bne lcopyscreenram+4	lda (sourcescreen),y	sta (destscreen),y	dey	lda (sourcescreen),y	sta (destscreen),y	dey	lda (sourcescreen),y	sta (destscreen),y	lda sourcescreen	clc	adc #$28	sta sourcescreen	bcc *+4	inc sourcescreen+1	lda destscreen	clc	adc #$28	sta destscreen	bcc *+4	inc destscreen+1	dex	bpl lcopyscreenram+2	rts; shift screen down    ucopyscreenram    ldx #24    ldy #39    lda (sourcescreen),y    sta (destscreen),y    dey    lda (sourcescreen),y    sta (destscreen),y    dey    lda (sourcescreen),y    sta (destscreen),y    dey    lda (sourcescreen),y    sta (destscreen),y    dey    lda (sourcescreen),y    sta (destscreen),y    dey    lda (sourcescreen),y    sta (destscreen),y    dey    cpy #3    bne ucopyscreenram+4    lda (sourcescreen),y    sta (destscreen),y    dey    lda (sourcescreen),y    sta (destscreen),y    dey    lda (sourcescreen),y    sta (destscreen),y    dey    lda (sourcescreen),y    sta (destscreen),y    lda sourcescreen    sec    sbc #40    sta sourcescreen    bcs *+4    dec sourcescreen+1    lda destscreen    sec    sbc #40    sta destscreen    bcs *+4    dec destscreen+1    dex    bpl ucopyscreenram+2    rts; shift screen updcopyscreenram    ldx #24	ldy #39	lda (sourcescreen),y	sta (destscreen),y	dey	lda (sourcescreen),y	sta (destscreen),y	dey	lda (sourcescreen),y	sta (destscreen),y	dey	lda (sourcescreen),y	sta (destscreen),y	dey	lda (sourcescreen),y	sta (destscreen),y	dey	lda (sourcescreen),y	sta (destscreen),y	dey	cpy #3	bne dcopyscreenram+4	lda (sourcescreen),y	sta (destscreen),y	dey	lda (sourcescreen),y	sta (destscreen),y	dey	lda (sourcescreen),y	sta (destscreen),y	lda (sourcescreen),y	sta (destscreen),y	dey	lda (sourcescreen),y	sta (destscreen),y	lda sourcescreen	clc	adc #$28	sta sourcescreen	bcc *+4	inc sourcescreen+1	lda destscreen	clc	adc #$28	sta destscreen	bcc *+4	inc destscreen+1	dex	bpl dcopyscreenram+2	rts;---------------------------------------currentchary	.byte $00 ; char y counter    dx       .byte $00 ; direction x flagdy       .byte $00 ; direction y flagstop     .byte $00 ; stop flag;---------------------------------------	*=charaddr	.binary "Quedex-L06/char.bin"		*=mapaddr	.binary "Quedex-L06/map.bin"		*=attribsaddr	.binary "Quedex-L06/attribs.bin"